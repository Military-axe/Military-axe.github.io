<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse on Mi1itray.axe</title>
    <link>https://military-axe.github.io/categories/reverse/</link>
    <description>Recent content in Reverse on Mi1itray.axe</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>mi1itray.axe copyright.</copyright>
    <lastBuildDate>Mon, 29 Apr 2024 22:01:29 +0800</lastBuildDate>
    <atom:link href="https://military-axe.github.io/categories/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>句柄降权绕过CallBacks检查</title>
      <link>https://military-axe.github.io/post/%E5%8F%A5%E6%9F%84%E9%99%8D%E6%9D%83%E7%BB%95%E8%BF%87callbacks%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Mon, 29 Apr 2024 22:01:29 +0800</pubDate>
      <guid>https://military-axe.github.io/post/%E5%8F%A5%E6%9F%84%E9%99%8D%E6%9D%83%E7%BB%95%E8%BF%87callbacks%E6%A3%80%E6%9F%A5/</guid>
      <description>&lt;p&gt;ObRegistyCallBacks保护指定进程，可以让攻击程序OpenProcess打开指定进程后获取的句柄权限是我们指定的权限范围, 比如不能读取进程内存, 不能终止进程。&lt;/p&gt;&#xA;&lt;p&gt;如何绕过这种保护，可以使用句柄降权/提权的方法，就可以对提高已经获取到的句柄权限。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust编写几种hook的方式</title>
      <link>https://military-axe.github.io/post/rust%E7%BC%96%E5%86%99%E5%87%A0%E7%A7%8Dhook%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 22 Mar 2024 15:59:44 +0800</pubDate>
      <guid>https://military-axe.github.io/post/rust%E7%BC%96%E5%86%99%E5%87%A0%E7%A7%8Dhook%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;使用Rust编写几种在windows上常用的hook方式:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IAT hook&lt;/li&gt;&#xA;&lt;li&gt;Inline hook&lt;/li&gt;&#xA;&lt;li&gt;VMT hook&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;为什么要用rust的不用c++？就是想用，想给自己找麻烦😎&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用PEB遍历模块链表</title>
      <link>https://military-axe.github.io/post/%E5%88%A9%E7%94%A8peb%E9%81%8D%E5%8E%86%E6%A8%A1%E5%9D%97%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 19 Mar 2024 11:36:56 +0800</pubDate>
      <guid>https://military-axe.github.io/post/%E5%88%A9%E7%94%A8peb%E9%81%8D%E5%8E%86%E6%A8%A1%E5%9D%97%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;使用c++, rust实现遍历PEB获取模块信息的代码段. 主要练练rust&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 香山杯 Reverse</title>
      <link>https://military-axe.github.io/post/2023-%E9%A6%99%E5%B1%B1%E6%9D%AF-reverse/</link>
      <pubDate>Mon, 16 Oct 2023 14:05:44 +0800</pubDate>
      <guid>https://military-axe.github.io/post/2023-%E9%A6%99%E5%B1%B1%E6%9D%AF-reverse/</guid>
      <description>&lt;p&gt;香山杯初赛的3到逆向的WP，不是很难的题，但是有一些新的东西，chaquopy框架，这个框架完成了一套sdk，可以安卓调用python代码也可以python调用java代码。可惜的是python是源码存储，还有研究的空间&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 研究生国赛 Reverse</title>
      <link>https://military-axe.github.io/post/2023-%E7%A0%94%E7%A9%B6%E7%94%9F%E5%9B%BD%E8%B5%9B-reverse/</link>
      <pubDate>Wed, 27 Sep 2023 23:08:11 +0800</pubDate>
      <guid>https://military-axe.github.io/post/2023-%E7%A0%94%E7%A9%B6%E7%94%9F%E5%9B%BD%E8%B5%9B-reverse/</guid>
      <description>&lt;p&gt;4道题做了3到，都不太方便纯静态，动调倒是都挺简单的. 最后一题unity的游戏没什么经验，不知道怎么下手，CE也没下就放弃了&lt;/p&gt;&#xA;&lt;p&gt;更新：又看了一下其实unity还是很简单，只是忘记dnspy该展开那个类了，（我说怎么看不到代码呢&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 羊城杯 Reverse</title>
      <link>https://military-axe.github.io/post/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-reverse/</link>
      <pubDate>Wed, 06 Sep 2023 17:50:41 +0800</pubDate>
      <guid>https://military-axe.github.io/post/2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-reverse/</guid>
      <description>&lt;p&gt;没打，王哥发了我三题，我就看了一下，稍微多花了时间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obfuscate hide string &amp;&amp; zer0pts</title>
      <link>https://military-axe.github.io/post/obfuscate_hide_string_and_zer0pts/</link>
      <pubDate>Mon, 17 Jul 2023 15:43:19 +0800</pubDate>
      <guid>https://military-axe.github.io/post/obfuscate_hide_string_and_zer0pts/</guid>
      <description>&lt;p&gt;Obfuscate项目是用于隐藏字符串，增加分析的难度，但是Obfuscate只能对抗静态的分析。zer0pts比赛中的一题就是利用这个项目，但是它很巧妙，隐藏的是模块的函数名，主要逻辑是调用so文件的模块，它隐藏so中的函数名后，从静态分析是很难看出来调用的逻辑是什么，忽然感觉这个项目就有点用了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frida call java class/method to explode</title>
      <link>https://military-axe.github.io/post/frida_call_method_to_explode/</link>
      <pubDate>Fri, 07 Jul 2023 10:01:10 +0800</pubDate>
      <guid>https://military-axe.github.io/post/frida_call_method_to_explode/</guid>
      <description>&lt;p&gt;利用Frida去调用java代码中的类，然后爆破。算是一种主动的方法。主要是之前有一道apk题目是爆破的思路，但是我不会写java代码，想起来很难受，冲浪的时候看到&lt;a href=&#34;https://eternalsakura13.com/&#34;&gt;Sakura&lt;/a&gt;的blog有感，就再去试试，并记录在此。然后发现这题原来是adword原题，（其实题目挺简单，只是当时摆），气死✌了。&lt;/p&gt;&#xA;&lt;p&gt;主要是记录Frida主动调用apk中Java中的代码。主动调用可以用于爆破，模拟程序部分执行。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的知识点是在java代码中的static类型数据在爆破过程中需要每次都对这种类型值重新设置。因为static类型在所有实例中都是统一，修改一个实例就会修改所有实例，需要用&lt;code&gt;变量.属性.value = ...&lt;/code&gt;的写法重新设置值。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; bvar = b.$new(IntClass.$new(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (...) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bvar._static_val.value = ...;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ida Symbolic Recovery</title>
      <link>https://military-axe.github.io/post/ida_symbolic_recovery/</link>
      <pubDate>Mon, 03 Jul 2023 21:51:06 +0800</pubDate>
      <guid>https://military-axe.github.io/post/ida_symbolic_recovery/</guid>
      <description>&lt;p&gt;最近发现二进制文件中符号恢复的手段有不少，这里想记录一下几种符号恢复的工具使用与效果对比。&lt;/p&gt;&#xA;&lt;p&gt;Finger，lscan，flair，bindiff&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frida learn &amp;&amp; sctf 2023 checkFlow</title>
      <link>https://military-axe.github.io/post/frida_learn_and_2023_sctf_check_flow/</link>
      <pubDate>Mon, 03 Jul 2023 16:06:30 +0800</pubDate>
      <guid>https://military-axe.github.io/post/frida_learn_and_2023_sctf_check_flow/</guid>
      <description>&lt;p&gt;没有打sctf，但是赛后看NU1L wp时，看到checkFlow这题，师傅用frida调用本身函数来爆破。虽然这种爆破要求本身函数状态不受运行的影响，但还是很好的做法。这种做法一直都有，只是我一直没去了解，这次看到这个，就学习一下&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 Two Reverse CrackMe WriteUp</title>
      <link>https://military-axe.github.io/post/%E5%A4%A9%E8%9E%8D%E4%BF%A1wp/</link>
      <pubDate>Fri, 30 Jun 2023 17:05:32 +0800</pubDate>
      <guid>https://military-axe.github.io/post/%E5%A4%A9%E8%9E%8D%E4%BF%A1wp/</guid>
      <description>&lt;p&gt;前几天打了一个应该是天融信的比赛，题目不难，简单记录一下。&lt;/p&gt;&#xA;&lt;p&gt;一道是花指令+rc4，一道是mov混淆&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 XCTF GotYouKey Write Up</title>
      <link>https://military-axe.github.io/post/gotyoukey/</link>
      <pubDate>Wed, 07 Jun 2023 13:37:53 +0800</pubDate>
      <guid>https://military-axe.github.io/post/gotyoukey/</guid>
      <description>&lt;p&gt;前些天没做出来的题目，后面再思考后发现了自己忽略so文件中调用java代码，赛后做了出来整理在此。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
