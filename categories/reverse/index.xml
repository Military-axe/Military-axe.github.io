<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse on Mi1itray.axe</title>
    <link>https://military-axe.github.io/categories/reverse/</link>
    <description>Recent content in Reverse on Mi1itray.axe</description>
    <generator>Hugo 0.125.1</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Apr 2024 22:01:29 +0800</lastBuildDate>
    <atom:link href="https://military-axe.github.io/categories/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>句柄降权绕过CallBacks检查</title>
      <link>https://military-axe.github.io/blog/2024-04-29-%E5%8F%A5%E6%9F%84%E9%99%8D%E6%9D%83%E7%BB%95%E8%BF%87callbacks%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Mon, 29 Apr 2024 22:01:29 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2024-04-29-%E5%8F%A5%E6%9F%84%E9%99%8D%E6%9D%83%E7%BB%95%E8%BF%87callbacks%E6%A3%80%E6%9F%A5/</guid>
      <description>&lt;p&gt;ObRegistyCallBacks保护指定进程，可以让我们攻击程序OpenProcess打开指定进程后获取的句柄权限是我们指定的权限范围, 比如不能读取进程内存, 不能终止进程。&lt;/p&gt;&#xA;&lt;p&gt;如何绕过这种保护，可以使用句柄降权/提权的方法，就可以对提高已经获取到的句柄权限。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust编写几种hook的方式</title>
      <link>https://military-axe.github.io/blog/2024-03-22-rust%E7%BC%96%E5%86%99%E5%87%A0%E7%A7%8Dhook%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 22 Mar 2024 15:59:44 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2024-03-22-rust%E7%BC%96%E5%86%99%E5%87%A0%E7%A7%8Dhook%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;使用Rust编写几种在windows上常用的hook方式:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IAT hook&lt;/li&gt;&#xA;&lt;li&gt;Inline hook&lt;/li&gt;&#xA;&lt;li&gt;VMT hook&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;为什么要用rust的不用c++？就是想用，想给自己找麻烦😎&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用PEB遍历模块链表</title>
      <link>https://military-axe.github.io/blog/2024-03-19-%E5%88%A9%E7%94%A8peb%E9%81%8D%E5%8E%86%E6%A8%A1%E5%9D%97%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 19 Mar 2024 11:36:56 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2024-03-19-%E5%88%A9%E7%94%A8peb%E9%81%8D%E5%8E%86%E6%A8%A1%E5%9D%97%E9%93%BE%E8%A1%A8/</guid>
      <description>&lt;p&gt;使用c++, rust实现遍历PEB获取模块信息的代码段. 主要练练rust&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 香山杯 Reverse</title>
      <link>https://military-axe.github.io/blog/2023-10-16-2023-%E9%A6%99%E5%B1%B1%E6%9D%AF-reverse/</link>
      <pubDate>Mon, 16 Oct 2023 14:05:44 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-10-16-2023-%E9%A6%99%E5%B1%B1%E6%9D%AF-reverse/</guid>
      <description>&lt;p&gt;香山杯初赛的3到逆向的WP，不是很难的题，但是有一些新的东西，chaquopy框架，这个框架完成了一套sdk，可以安卓调用python代码也可以python调用java代码。可惜的是python是源码存储，还有研究的空间&lt;/p&gt;</description>
    </item>
    <item>
      <title>BiAn: Smart Contract Source Code Obfuscation</title>
      <link>https://military-axe.github.io/blog/2023-10-12-bian-smart-contract-source-code-obfuscation/</link>
      <pubDate>Thu, 12 Oct 2023 14:42:18 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-10-12-bian-smart-contract-source-code-obfuscation/</guid>
      <description>&lt;p&gt;智能合约代码混淆，感觉还是ollvm的影子，还是那三种模式，只是做了相关的适配以及加了很多其他细节，总体思路是没有变的。&lt;/p&gt;&#xA;&lt;p&gt;创新点在于使用改进后的混沌映射来做不透明谓词，增加了一定的混淆程度&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;会议：IEEE Transactions on Software Engineering&lt;/p&gt;&#xA;&lt;p&gt;等级：CCF-A&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>2023 研究生国赛 Reverse</title>
      <link>https://military-axe.github.io/blog/2023-09-27-2023-%E7%A0%94%E7%A9%B6%E7%94%9F%E5%9B%BD%E8%B5%9B-reverse/</link>
      <pubDate>Wed, 27 Sep 2023 23:08:11 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-09-27-2023-%E7%A0%94%E7%A9%B6%E7%94%9F%E5%9B%BD%E8%B5%9B-reverse/</guid>
      <description>&lt;p&gt;4道题做了3到，都不太方便纯静态，动调倒是都挺简单的. 最后一题unity的游戏没什么经验，不知道怎么下手，CE也没下就放弃了&lt;/p&gt;&#xA;&lt;p&gt;更新：又看了一下其实unity还是很简单，只是忘记dnspy该展开那个类了，（我说怎么看不到代码呢&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 羊城杯 Reverse</title>
      <link>https://military-axe.github.io/blog/2023-09-06-2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-reverse/</link>
      <pubDate>Wed, 06 Sep 2023 17:50:41 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-09-06-2023-%E7%BE%8A%E5%9F%8E%E6%9D%AF-reverse/</guid>
      <description>&lt;p&gt;没打，王哥发了我三题，我就看了一下，稍微多花了时间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Khaos: The Impact of Inter-procedural Code Obfuscation on Binary Diffing Techniques</title>
      <link>https://military-axe.github.io/blog/2023-07-23-khaos-the-impact-of-inter-procedural-code-obfuscation-on-binary-diffing-techniques/</link>
      <pubDate>Sun, 23 Jul 2023 21:36:57 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-07-23-khaos-the-impact-of-inter-procedural-code-obfuscation-on-binary-diffing-techniques/</guid>
      <description>&lt;p&gt;这是一篇CCFB的文章，来自中科大，文章提出了一种新的二进制混淆模式来抵抗binary diffing技术的分析。&lt;/p&gt;&#xA;&lt;p&gt;从混淆角度，它是从IR层面切割函数并融合函数，改变了函数的调用关系。与OLLVM是不冲突的混淆，对抵抗binary diffing有很好的效果，并且也是基于LLVM框架，对混淆技术的发展是有意义的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obfuscate hide string &amp;&amp; zer0pts</title>
      <link>https://military-axe.github.io/blog/2023-07-17-obfuscate-hide-string-zer0pts/</link>
      <pubDate>Mon, 17 Jul 2023 15:43:19 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-07-17-obfuscate-hide-string-zer0pts/</guid>
      <description>&lt;p&gt;Obfuscate项目是用于隐藏字符串，增加分析的难度，但是Obfuscate只能对抗静态的分析。zer0pts比赛中的一题就是利用这个项目，但是它很巧妙，隐藏的是模块的函数名，主要逻辑是调用so文件的模块，它隐藏so中的函数名后，从静态分析是很难看出来调用的逻辑是什么，忽然感觉这个项目就有点用了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frida call java class/method to explode</title>
      <link>https://military-axe.github.io/blog/2023-07-07-frida-call-java-class/method-to-explode/</link>
      <pubDate>Fri, 07 Jul 2023 10:01:10 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-07-07-frida-call-java-class/method-to-explode/</guid>
      <description>&lt;p&gt;利用Frida去调用java代码中的类，然后爆破。算是一种主动的方法。主要是之前有一道apk题目是爆破的思路，但是我不会写java代码，想起来很难受，冲浪的时候看到&#xD;&#xA;&lt;a href=&#34;https://eternalsakura13.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sakura&lt;/a&gt;的blog有感，就再去试试，并记录在此。然后发现这题原来是adword原题，（其实题目挺简单，只是当时摆），气死✌了。&lt;/p&gt;&#xA;&lt;p&gt;主要是记录Frida主动调用apk中Java中的代码。主动调用可以用于爆破，模拟程序部分执行。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的知识点是在java代码中的static类型数据在爆破过程中需要每次都对这种类型值重新设置。因为static类型在所有实例中都是统一，修改一个实例就会修改所有实例，需要用&lt;code&gt;变量.属性.value = ...&lt;/code&gt;的写法重新设置值。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;var&lt;/span&gt; bvar &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; b.$new(IntClass.$new(&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (...) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bvar._static_val.value &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; ...;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ida Symbolic Recovery</title>
      <link>https://military-axe.github.io/blog/2023-07-03-ida-symbolic-recovery/</link>
      <pubDate>Mon, 03 Jul 2023 21:51:06 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-07-03-ida-symbolic-recovery/</guid>
      <description>&lt;p&gt;最近发现二进制文件中符号恢复的手段有不少，这里想记录一下几种符号恢复的工具使用与效果对比。&lt;/p&gt;&#xA;&lt;p&gt;Finger，lscan，flair，bindiff&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frida learn &amp;&amp; sctf 2023 checkFlow</title>
      <link>https://military-axe.github.io/blog/2023-07-03-frida-learn-sctf-2023-checkflow/</link>
      <pubDate>Mon, 03 Jul 2023 16:06:30 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-07-03-frida-learn-sctf-2023-checkflow/</guid>
      <description>&lt;p&gt;没有打sctf，但是赛后看NU1L wp时，看到checkFlow这题，师傅用frida调用本身函数来爆破。虽然这种爆破要求本身函数状态不受运行的影响，但还是很好的做法。这种做法一直都有，只是我一直没去了解，这次看到这个，就学习一下&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 Two Reverse CrackMe WriteUp</title>
      <link>https://military-axe.github.io/blog/2023-06-30-2023-two-reverse-crackme-writeup/</link>
      <pubDate>Fri, 30 Jun 2023 17:05:32 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-06-30-2023-two-reverse-crackme-writeup/</guid>
      <description>&lt;p&gt;前几天打了一个应该是天融信的比赛，题目不难，简单记录一下。&lt;/p&gt;&#xA;&lt;p&gt;一道是花指令+rc4，一道是mov混淆&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 ciscn ezbytes Write Up</title>
      <link>https://military-axe.github.io/blog/2023-06-11-2023-ciscn-ezbytes-write-up/</link>
      <pubDate>Sun, 11 Jun 2023 15:40:13 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-06-11-2023-ciscn-ezbytes-write-up/</guid>
      <description>&lt;p&gt;这题使用了DWARF字节码，需要了解DWARF相关知识，实际上是c++异常处理中的相关知识。这题利用异常处理的栈回溯，执行了一段设计好的DWARF字节码，单纯的跟踪是跟踪不到的&lt;/p&gt;&#xA;&lt;p&gt;这题怪我没有心去做这题，不然早就出了，最近想改变一下心态，既然不能摆脱，那就走到底。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyFET: Forensically Equivalent Transformation for Python Binary Decompilation</title>
      <link>https://military-axe.github.io/blog/2023-06-10-pyfet-forensically-equivalent-transformation-for-python-binary-decompilation/</link>
      <pubDate>Sat, 10 Jun 2023 21:12:15 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-06-10-pyfet-forensically-equivalent-transformation-for-python-binary-decompilation/</guid>
      <description>&lt;p&gt;2023 S&amp;amp;P论文，讲述的是python反编译的研究工作，总结了大量的反编译特征，针对恶意代码分析领域，提供一种新的解决方案。&#xA;从逆向和工程的角度来说，这项工作有很多值得学习的部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023 XCTF GotYouKey Write Up</title>
      <link>https://military-axe.github.io/blog/2023-06-07-2023-xctf-gotyoukey-write-up/</link>
      <pubDate>Wed, 07 Jun 2023 13:37:53 +0800</pubDate>
      <guid>https://military-axe.github.io/blog/2023-06-07-2023-xctf-gotyoukey-write-up/</guid>
      <description>&lt;p&gt;前些天没做出来的题目，后面再思考后发现了自己忽略so文件中调用java代码，赛后做了出来整理在此。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
