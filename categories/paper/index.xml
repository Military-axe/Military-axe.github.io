<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paper on mi1itray.axe</title>
    <link>https://military-axe.github.io/categories/paper/</link>
    <description>Recent content in Paper on mi1itray.axe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jul 2023 21:36:57 +0800</lastBuildDate><atom:link href="https://military-axe.github.io/categories/paper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Khaos: The Impact of Inter-procedural Code Obfuscation on Binary Diffing Techniques</title>
      <link>https://military-axe.github.io/blog/2023-07-23-khaos-the-impact-of-inter-procedural-code-obfuscation-on-binary-diffing-techniques/</link>
      <pubDate>Sun, 23 Jul 2023 21:36:57 +0800</pubDate>
      
      <guid>https://military-axe.github.io/blog/2023-07-23-khaos-the-impact-of-inter-procedural-code-obfuscation-on-binary-diffing-techniques/</guid>
      <description>&lt;p&gt;这是一篇CCFB的文章，来自中科大，文章提出了一种新的二进制混淆模式来抵抗binary diffing技术的分析。&lt;/p&gt;
&lt;p&gt;从混淆角度，它是从IR层面切割函数并融合函数，改变了函数的调用关系。与OLLVM是不冲突的混淆，对抵抗binary diffing有很好的效果，并且也是基于LLVM框架，对混淆技术的发展是有意义的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KextFuzz Fuzzing macOS Kernel EXTensions on Apple Silicon via Exploiting Mitigations</title>
      <link>https://military-axe.github.io/blog/2023-06-14-kextfuzz-fuzzing-macos-kernel-extensions-on-apple-silicon-via-exploiting-mitigations/</link>
      <pubDate>Wed, 14 Jun 2023 15:53:46 +0800</pubDate>
      
      <guid>https://military-axe.github.io/blog/2023-06-14-kextfuzz-fuzzing-macos-kernel-extensions-on-apple-silicon-via-exploiting-mitigations/</guid>
      <description>&lt;p&gt;来自清华vul337实验室与蚂蚁基础安全合作的一篇2023年USENIX Security的文章&lt;/p&gt;
&lt;p&gt;讲述如何针对macOS内核部分的kext进行模糊测试，原本kext是闭源的部分，同时处于内核。这使得插桩难，容易崩溃，黑盒测试效果差。同时苹果本身一些特权代码被保护。文章针对这些问题提出三个机制来解决&lt;/p&gt;
&lt;p&gt;通过替换arm的PA指令来插桩，做覆盖率统计；通过本地hook特权检查函数来绕过苹果的检查，进一步fuzz特权代码；设计一个污点分析模块，分析macOS内核接口格式，辅助fuzz&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyFET: Forensically Equivalent Transformation for Python Binary Decompilation</title>
      <link>https://military-axe.github.io/blog/2023-06-10-pyfet-forensically-equivalent-transformation-for-python-binary-decompilation/</link>
      <pubDate>Sat, 10 Jun 2023 21:12:15 +0800</pubDate>
      
      <guid>https://military-axe.github.io/blog/2023-06-10-pyfet-forensically-equivalent-transformation-for-python-binary-decompilation/</guid>
      <description>&lt;p&gt;2023 S&amp;amp;P论文，讲述的是python反编译的研究工作，总结了大量的反编译特征，针对恶意代码分析领域，提供一种新的解决方案。
从逆向和工程的角度来说，这项工作有很多值得学习的部分。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
